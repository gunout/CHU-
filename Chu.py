import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

class CHUReunionAnalyzer:
    def __init__(self):
        self.chu_nord = "CHU Nord - Saint-Denis"
        self.chu_sud = "CHU Sud - Saint-Pierre"
        self.colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#F9A602', '#6A0572', 
                      '#AB83A1', '#5CAB7D', '#2A9D8F', '#E76F51', '#264653']
        
        self.start_year = 2010
        self.end_year = 2024
        
    def generate_health_data(self):
        """G√©n√®re des donn√©es hospitali√®res pour les deux CHU de La R√©union"""
        print("üè• G√©n√©ration des donn√©es hospitali√®res pour les CHU de La R√©union...")
        
        # Cr√©er une base de donn√©es mensuelle
        dates = pd.date_range(start=f'{self.start_year}-01-01', 
                             end=f'{self.end_year}-12-31', freq='M')
        
        data = {'Date': dates}
        
        # Donn√©es communes aux deux CHU
        data['Population_Reunion'] = self._simulate_population(dates)
        
        # Donn√©es pour CHU Nord
        data['CHU_Nord_Patients'] = self._simulate_nord_patients(dates)
        data['CHU_Nord_Urgences'] = self._simulate_nord_emergencies(dates)
        data['CHU_Nord_Chirurgies'] = self._simulate_nord_surgeries(dates)
        data['CHU_Nord_Naissances'] = self._simulate_nord_births(dates)
        data['CHU_Nord_Budget'] = self._simulate_nord_budget(dates)
        data['CHU_Nord_Personnel'] = self._simulate_nord_staff(dates)
        data['CHU_Nord_Lits'] = self._simulate_nord_beds(dates)
        
        # Donn√©es pour CHU Sud
        data['CHU_Sud_Patients'] = self._simulate_sud_patients(dates)
        data['CHU_Sud_Urgences'] = self._simulate_sud_emergencies(dates)
        data['CHU_Sud_Chirurgies'] = self._simulate_sud_surgeries(dates)
        data['CHU_Sud_Naissances'] = self._simulate_sud_births(dates)
        data['CHU_Sud_Budget'] = self._simulate_sud_budget(dates)
        data['CHU_Sud_Personnel'] = self._simulate_sud_staff(dates)
        data['CHU_Sud_Lits'] = self._simulate_sud_beds(dates)
        
        # Donn√©es √©pid√©miologiques sp√©cifiques √† La R√©union
        data['Dengue_Cas'] = self._simulate_dengue_cases(dates)
        data['Diabete_Cas'] = self._simulate_diabetes_cases(dates)
        data['Cardio_Cas'] = self._simulate_cardio_cases(dates)
        
        df = pd.DataFrame(data)
        
        # Ajouter des tendances saisonni√®res et √©pid√©miologiques
        self._add_health_trends(df)
        
        return df
    
    def _simulate_population(self, dates):
        """Simule la population r√©unionnaise"""
        base_population = 800000  # population de base en 2010
        
        population = []
        for i, date in enumerate(dates):
            # Croissance d√©mographique annuelle d'environ 0.7%
            growth = 1 + 0.007 * (i / 12)
            population.append(base_population * growth)
        
        return population
    
    def _simulate_nord_patients(self, dates):
        """Simule le nombre de patients pour le CHU Nord"""
        base_patients = 15000  # patients/mois
        
        patients = []
        for i, date in enumerate(dates):
            # Croissance li√©e √† la d√©mographie
            growth = 1 + 0.005 * (i / len(dates))
            
            # Saisonnalit√© (pic en hiver austral)
            month = date.month
            if month in [6, 7, 8]:  # Hiver austral
                seasonal = 1.15
            else:
                seasonal = 1.0
            
            # Bruit al√©atoire
            noise = np.random.normal(1, 0.05)
            
            patients.append(base_patients * growth * seasonal * noise)
        
        return patients
    
    def _simulate_nord_emergencies(self, dates):
        """Simule les passages aux urgences du CHU Nord"""
        base_emergencies = 8000  # urgences/mois
        
        emergencies = []
        for date in dates:
            # Saisonnalit√© (pic en √©t√© avec la dengue)
            month = date.month
            if month in [1, 2, 3]:  # √ât√© austral, saison des pluies
                seasonal = 1.25
            else:
                seasonal = 1.0
            
            noise = np.random.normal(1, 0.08)
            emergencies.append(base_emergencies * seasonal * noise)
        
        return emergencies
    
    def _simulate_nord_surgeries(self, dates):
        """Simule le nombre de chirurgies au CHU Nord"""
        base_surgeries = 1200  # chirurgies/mois
        
        surgeries = []
        for i, date in enumerate(dates):
            # Croissance r√©guli√®re
            growth = 1 + 0.01 * (i / len(dates))
            noise = np.random.normal(1, 0.06)
            surgeries.append(base_surgeries * growth * noise)
        
        return surgeries
    
    def _simulate_nord_births(self, dates):
        """Simule le nombre de naissances au CHU Nord"""
        base_births = 500  # naissances/mois
        
        births = []
        for date in dates:
            # L√©g√®re saisonnalit√©
            month = date.month
            if month in [9, 10]:  # Pic de naissances 9 mois apr√®s les f√™tes
                seasonal = 1.1
            else:
                seasonal = 1.0
            
            noise = np.random.normal(1, 0.07)
            births.append(base_births * seasonal * noise)
        
        return births
    
    def _simulate_nord_budget(self, dates):
        """Simule le budget du CHU Nord (en milliers d'euros)"""
        base_budget = 25000  # k‚Ç¨/mois
        
        budget = []
        for i, date in enumerate(dates):
            # Croissance annuelle d'environ 3%
            growth = 1 + 0.03 * (i / len(dates))
            noise = np.random.normal(1, 0.04)
            budget.append(base_budget * growth * noise)
        
        return budget
    
    def _simulate_nord_staff(self, dates):
        """Simule le nombre de personnel au CHU Nord"""
        base_staff = 3500  # personnels
        
        staff = []
        for i, date in enumerate(dates):
            # Croissance r√©guli√®re
            growth = 1 + 0.005 * (i / len(dates))
            staff.append(base_staff * growth)
        
        return staff
    
    def _simulate_nord_beds(self, dates):
        """Simule le nombre de lits au CHU Nord"""
        base_beds = 1200  # lits
        
        beds = []
        for i, date in enumerate(dates):
            # L√©g√®re augmentation sur la p√©riode
            growth = 1 + 0.002 * (i / len(dates))
            beds.append(base_beds * growth)
        
        return beds
    
    def _simulate_sud_patients(self, dates):
        """Simule le nombre de patients pour le CHU Sud"""
        base_patients = 12000  # patients/mois
        
        patients = []
        for i, date in enumerate(dates):
            # Croissance plus rapide que le Nord (d√©veloppement r√©cent)
            growth = 1 + 0.008 * (i / len(dates))
            
            # Saisonnalit√© similaire
            month = date.month
            if month in [6, 7, 8]:  # Hiver austral
                seasonal = 1.1
            else:
                seasonal = 1.0
            
            noise = np.random.normal(1, 0.06)
            patients.append(base_patients * growth * seasonal * noise)
        
        return patients
    
    def _simulate_sud_emergencies(self, dates):
        """Simule les passages aux urgences du CHU Sud"""
        base_emergencies = 6000  # urgences/mois
        
        emergencies = []
        for date in dates:
            # Saisonnalit√© (pic en √©t√© avec la dengue)
            month = date.month
            if month in [1, 2, 3]:  # √ât√© austral, saison des pluies
                seasonal = 1.3
            else:
                seasonal = 1.0
            
            noise = np.random.normal(1, 0.09)
            emergencies.append(base_emergencies * seasonal * noise)
        
        return emergencies
    
    def _simulate_sud_surgeries(self, dates):
        """Simule le nombre de chirurgies au CHU Sud"""
        base_surgeries = 900  # chirurgies/mois
        
        surgeries = []
        for i, date in enumerate(dates):
            # Croissance plus rapide que le Nord
            growth = 1 + 0.015 * (i / len(dates))
            noise = np.random.normal(1, 0.07)
            surgeries.append(base_surgeries * growth * noise)
        
        return surgeries
    
    def _simulate_sud_births(self, dates):
        """Simule le nombre de naissances au CHU Sud"""
        base_births = 400  # naissances/mois
        
        births = []
        for date in dates:
            # L√©g√®re saisonnalit√©
            month = date.month
            if month in [9, 10]:  # Pic de naissances 9 mois apr√®s les f√™tes
                seasonal = 1.15
            else:
                seasonal = 1.0
            
            noise = np.random.normal(1, 0.08)
            births.append(base_births * seasonal * noise)
        
        return births
    
    def _simulate_sud_budget(self, dates):
        """Simule le budget du CHU Sud (en milliers d'euros)"""
        base_budget = 18000  # k‚Ç¨/mois
        
        budget = []
        for i, date in enumerate(dates):
            # Croissance plus rapide que le Nord
            growth = 1 + 0.035 * (i / len(dates))
            noise = np.random.normal(1, 0.05)
            budget.append(base_budget * growth * noise)
        
        return budget
    
    def _simulate_sud_staff(self, dates):
        """Simule le nombre de personnel au CHU Sud"""
        base_staff = 2800  # personnels
        
        staff = []
        for i, date in enumerate(dates):
            # Croissance plus rapide que le Nord
            growth = 1 + 0.008 * (i / len(dates))
            staff.append(base_staff * growth)
        
        return staff
    
    def _simulate_sud_beds(self, dates):
        """Simule le nombre de lits au CHU Sud"""
        base_beds = 900  # lits
        
        beds = []
        for i, date in enumerate(dates):
            # Croissance plus rapide que le Nord
            growth = 1 + 0.004 * (i / len(dates))
            beds.append(base_beds * growth)
        
        return beds
    
    def _simulate_dengue_cases(self, dates):
        """Simule les cas de dengue √† La R√©union"""
        base_cases = 500  # cas/mois en base
        
        cases = []
        for date in dates:
            # Forte saisonnalit√© (√©t√© austral)
            month = date.month
            if month in [1, 2, 3, 4]:  # Saison des pluies
                seasonal = np.random.uniform(3, 8)  # √âpid√©mies
            else:
                seasonal = np.random.uniform(0.2, 1.5)
            
            # Cycles √©pid√©miques tous les 3-4 ans
            year = date.year
            if year in [2013, 2017, 2020, 2024]:
                epidemic = 1.5
            else:
                epidemic = 1.0
            
            cases.append(base_cases * seasonal * epidemic)
        
        return cases
    
    def _simulate_diabetes_cases(self, dates):
        """Simule les cas de diab√®te √† La R√©union (probl√®me majeur)"""
        base_cases = 2000  # cas/mois en base
        
        cases = []
        for i, date in enumerate(dates):
            # Croissance r√©guli√®re li√©e au vieillissement et √† l'alimentation
            growth = 1 + 0.01 * (i / len(dates))
            noise = np.random.normal(1, 0.03)
            cases.append(base_cases * growth * noise)
        
        return cases
    
    def _simulate_cardio_cases(self, dates):
        """Simule les cas de maladies cardiovasculaires √† La R√©union"""
        base_cases = 1500  # cas/mois en base
        
        cases = []
        for i, date in enumerate(dates):
            # Croissance r√©guli√®re
            growth = 1 + 0.007 * (i / len(dates))
            noise = np.random.normal(1, 0.04)
            cases.append(base_cases * growth * noise)
        
        return cases
    
    def _add_health_trends(self, df):
        """Ajoute des tendances sanitaires r√©alistes"""
        for i, row in df.iterrows():
            date = row['Date']
            year = date.year
            
            # Impact COVID-19 (2020-2021)
            if 2020 <= year <= 2021:
                if year == 2020 and date.month in [3, 4, 5]:
                    # Baisse des activit√©s non urgentes, augmentation des urgences
                    df.loc[i, 'CHU_Nord_Chirurgies'] *= 0.6
                    df.loc[i, 'CHU_Sud_Chirurgies'] *= 0.6
                    df.loc[i, 'CHU_Nord_Urgences'] *= 1.1
                    df.loc[i, 'CHU_Sud_Urgences'] *= 1.1
            
            # D√©veloppement du CHU Sud (2015-2018)
            elif 2015 <= year <= 2018:
                df.loc[i, 'CHU_Sud_Budget'] *= 1.05
                df.loc[i, 'CHU_Sud_Personnel'] *= 1.03
            
            # Vieillissement de la population (augmentation constante)
            if year >= 2015:
                aging = 1 + 0.002 * (year - 2015)
                df.loc[i, 'CHU_Nord_Patients'] *= aging
                df.loc[i, 'CHU_Sud_Patients'] *= aging
            
            # Augmentation des maladies chroniques
            if year >= 2010:
                chronic_growth = 1 + 0.005 * (year - 2010)
                df.loc[i, 'Diabete_Cas'] *= chronic_growth
                df.loc[i, 'Cardio_Cas'] *= chronic_growth
    
    def create_health_analysis(self, df):
        """Cr√©e une analyse compl√®te des donn√©es hospitali√®res"""
        plt.style.use('seaborn-v0_8')
        fig = plt.figure(figsize=(20, 20))
        
        # 1. Comparaison des patients entre CHU Nord et Sud
        ax1 = plt.subplot(3, 2, 1)
        self._plot_patient_comparison(df, ax1)
        
        # 2. Activit√© aux urgences
        ax2 = plt.subplot(3, 2, 2)
        self._plot_emergency_activity(df, ax2)
        
        # 3. Budget et ressources
        ax3 = plt.subplot(3, 2, 3)
        self._plot_budget_resources(df, ax3)
        
        # 4. √âpid√©miologie r√©unionnaise
        ax4 = plt.subplot(3, 2, 4)
        self._plot_epidemiology(df, ax4)
        
        # 5. √âvolution annuelle comparative
        ax5 = plt.subplot(3, 2, 5)
        self._plot_yearly_comparison(df, ax5)
        
        # 6. Performances et indicateurs
        ax6 = plt.subplot(3, 2, 6)
        self._plot_performance_indicators(df, ax6)
        
        plt.suptitle(f'Analyse Comparative des CHU de La R√©union (2010-2024)', 
                    fontsize=16, fontweight='bold')
        plt.tight_layout()
        plt.savefig('chu_reunion_analysis.png', dpi=300, bbox_inches='tight')
        plt.show()
        
        # G√©n√©rer les insights
        self._generate_health_insights(df)
    
    def _plot_patient_comparison(self, df, ax):
        """Plot de comparaison des patients entre CHU Nord et Sud"""
        ax.plot(df['Date'], df['CHU_Nord_Patients'], label='CHU Nord', 
               linewidth=2, color='#264653', alpha=0.8)
        ax.plot(df['Date'], df['CHU_Sud_Patients'], label='CHU Sud', 
               linewidth=2, color='#2A9D8F', alpha=0.8)
        
        ax.set_title('Nombre de Patients Trait√©s par Mois', 
                    fontsize=12, fontweight='bold')
        ax.set_ylabel('Nombre de Patients')
        ax.legend()
        ax.grid(True, alpha=0.3)
    
    def _plot_emergency_activity(self, df, ax):
        """Plot de l'activit√© aux urgences"""
        ax.plot(df['Date'], df['CHU_Nord_Urgences'], label='CHU Nord', 
               linewidth=2, color='#E76F51', alpha=0.8)
        ax.plot(df['Date'], df['CHU_Sud_Urgences'], label='CHU Sud', 
               linewidth=2, color='#F9A602', alpha=0.8)
        
        ax.set_title('Passages aux Urgences par Mois', 
                    fontsize=12, fontweight='bold')
        ax.set_ylabel('Nombre de Passages')
        ax.legend()
        ax.grid(True, alpha=0.3)
    
    def _plot_budget_resources(self, df, ax):
        """Plot des budgets et ressources"""
        # Budgets
        ax.plot(df['Date'], df['CHU_Nord_Budget'], label='Budget CHU Nord', 
               linewidth=2, color='#6A0572', alpha=0.8)
        ax.plot(df['Date'], df['CHU_Sud_Budget'], label='Budget CHU Sud', 
               linewidth=2, color='#AB83A1', alpha=0.8)
        
        ax.set_title('Budget Mensuel (k‚Ç¨)', fontsize=12, fontweight='bold')
        ax.set_ylabel('Budget (k‚Ç¨)')
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        # Personnel en second axe
        ax2 = ax.twinx()
        ax2.plot(df['Date'], df['CHU_Nord_Personnel'], label='Personnel CHU Nord', 
                linestyle='--', linewidth=1, color='#45B7D1', alpha=0.8)
        ax2.plot(df['Date'], df['CHU_Sud_Personnel'], label='Personnel CHU Sud', 
                linestyle='--', linewidth=1, color='#4ECDC4', alpha=0.8)
        ax2.set_ylabel('Nombre de Personnels')
    
    def _plot_epidemiology(self, df, ax):
        """Plot des donn√©es √©pid√©miologiques"""
        ax.plot(df['Date'], df['Dengue_Cas'], label='Cas de Dengue', 
               linewidth=2, color='#FF6B6B', alpha=0.8)
        
        ax2 = ax.twinx()
        ax2.plot(df['Date'], df['Diabete_Cas'], label='Cas de Diab√®te', 
                linewidth=2, color='#5CAB7D', alpha=0.8)
        ax2.plot(df['Date'], df['Cardio_Cas'], label='Cas Cardio', 
                linewidth=2, color='#F9A602', alpha=0.8)
        
        ax.set_title('√âpid√©miologie √† La R√©union', fontsize=12, fontweight='bold')
        ax.set_ylabel('Cas de Dengue', color='#FF6B6B')
        ax2.set_ylabel('Cas Chroniques', color='#5CAB7D')
        ax.tick_params(axis='y', labelcolor='#FF6B6B')
        ax2.tick_params(axis='y', labelcolor='#5CAB7D')
        ax.grid(True, alpha=0.3)
        
        # Combiner les l√©gendes
        lines1, labels1 = ax.get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        ax.legend(lines1 + lines2, labels1 + labels2, loc='upper left')
    
    def _plot_yearly_comparison(self, df, ax):
        """Plot de l'√©volution annuelle comparative"""
        df_yearly = df.copy()
        df_yearly['Year'] = df_yearly['Date'].dt.year
        
        yearly_data = df_yearly.groupby('Year').agg({
            'CHU_Nord_Patients': 'mean',
            'CHU_Sud_Patients': 'mean',
            'CHU_Nord_Budget': 'mean',
            'CHU_Sud_Budget': 'mean'
        })
        
        x = yearly_data.index
        width = 0.35
        
        ax.bar(x - width/2, yearly_data['CHU_Nord_Patients'], width, 
               label='CHU Nord', color='#264653', alpha=0.7)
        ax.bar(x + width/2, yearly_data['CHU_Sud_Patients'], width, 
               label='CHU Sud', color='#2A9D8F', alpha=0.7)
        
        ax.set_title('Patients Moyens par An', fontsize=12, fontweight='bold')
        ax.set_ylabel('Nombre de Patients')
        ax.set_xlabel('Ann√©e')
        ax.legend()
        ax.grid(True, alpha=0.3, axis='y')
        ax.tick_params(axis='x', rotation=45)
    
    def _plot_performance_indicators(self, df, ax):
        """Plot des indicateurs de performance"""
        # Calcul des indicateurs
        df['Nord_Patients_Par_Personnel'] = df['CHU_Nord_Patients'] / df['CHU_Nord_Personnel']
        df['Sud_Patients_Par_Personnel'] = df['CHU_Sud_Patients'] / df['CHU_Sud_Personnel']
        
        df['Nord_Budget_Par_Patient'] = df['CHU_Nord_Budget'] / df['CHU_Nord_Patients']
        df['Sud_Budget_Par_Patient'] = df['CHU_Sud_Budget'] / df['CHU_Sud_Patients']
        
        ax.plot(df['Date'], df['Nord_Patients_Par_Personnel'], 
               label='CHU Nord (Patients/Personnel)', linewidth=2, color='#264653')
        ax.plot(df['Date'], df['Sud_Patients_Par_Personnel'], 
               label='CHU Sud (Patients/Personnel)', linewidth=2, color='#2A9D8F')
        
        ax.set_title('Indicateurs de Performance', fontsize=12, fontweight='bold')
        ax.set_ylabel('Patients par Personnel')
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        # Budget par patient en second axe
        ax2 = ax.twinx()
        ax2.plot(df['Date'], df['Nord_Budget_Par_Patient'], 
                label='CHU Nord (Budget/Patient)', linestyle='--', linewidth=1, color='#E76F51')
        ax2.plot(df['Date'], df['Sud_Budget_Par_Patient'], 
                label='CHU Sud (Budget/Patient)', linestyle='--', linewidth=1, color='#F9A602')
        ax2.set_ylabel('Budget par Patient (‚Ç¨)')
    
    def _generate_health_insights(self, df):
        """G√©n√®re des insights analytiques"""
        print(f"üè• INSIGHTS ANALYTIQUES - CHU de La R√©union")
        print("=" * 60)
        
        # 1. Statistiques de base
        print("\n1. üìà STATISTIQUES G√âN√âRALES (2010-2024):")
        total_nord_patients = df['CHU_Nord_Patients'].sum()
        total_sud_patients = df['CHU_Sud_Patients'].sum()
        avg_nord_budget = df['CHU_Nord_Budget'].mean()
        avg_sud_budget = df['CHU_Sud_Budget'].mean()
        
        print(f"Patients totaux CHU Nord: {total_nord_patients:,.0f}")
        print(f"Patients totaux CHU Sud: {total_sud_patients:,.0f}")
        print(f"Budget moyen mensuel CHU Nord: {avg_nord_budget:,.0f} k‚Ç¨")
        print(f"Budget moyen mensuel CHU Sud: {avg_sud_budget:,.0f} k‚Ç¨")
        
        # 2. Croissance
        print("\n2. üìä TAUX DE CROISSANCE:")
        growth_nord = ((df['CHU_Nord_Patients'].iloc[-12:].mean() / 
                       df['CHU_Nord_Patients'].iloc[:12].mean()) - 1) * 100
        growth_sud = ((df['CHU_Sud_Patients'].iloc[-12:].mean() / 
                      df['CHU_Sud_Patients'].iloc[:12].mean()) - 1) * 100
        
        print(f"Croissance des patients CHU Nord: {growth_nord:.1f}%")
        print(f"Croissance des patients CHU Sud: {growth_sud:.1f}%")
        
        # 3. Comparaison des ressources
        print("\n3. üìã COMPARAISON DES RESSOURCES:")
        nord_patients_per_staff = df['CHU_Nord_Patients'].mean() / df['CHU_Nord_Personnel'].mean()
        sud_patients_per_staff = df['CHU_Sud_Patients'].mean() / df['CHU_Sud_Personnel'].mean()
        
        nord_budget_per_patient = df['CHU_Nord_Budget'].mean() / df['CHU_Nord_Patients'].mean()
        sud_budget_per_patient = df['CHU_Sud_Budget'].mean() / df['CHU_Sud_Patients'].mean()
        
        print(f"Patients par personnel CHU Nord: {nord_patients_per_staff:.1f}")
        print(f"Patients par personnel CHU Sud: {sud_patients_per_staff:.1f}")
        print(f"Budget par patient CHU Nord: {nord_budget_per_patient:.1f} k‚Ç¨")
        print(f"Budget par patient CHU Sud: {sud_budget_per_patient:.1f} k‚Ç¨")
        
        # 4. D√©fis sanitaires
        print("\n4. ü¶ü D√âFIS SANITAires:")
        avg_dengue = df['Dengue_Cas'].mean()
        avg_diabetes = df['Diabete_Cas'].mean()
        avg_cardio = df['Cardio_Cas'].mean()
        
        print(f"Cas moyens de dengue/mois: {avg_dengue:.0f}")
        print(f"Cas moyens de diab√®te/mois: {avg_diabetes:.0f}")
        print(f"Cas moyens de cardio/mois: {avg_cardio:.0f}")
        
        # 5. Recommandations
        print("\n5. üí° RECOMMANDATIONS STRAT√âGIQUES:")
        print("‚Ä¢ Renforcer la pr√©vention contre la dengue et les maladies chroniques")
        print("‚Ä¢ Optimiser la r√©partition des ressources entre CHU Nord et Sud")
        print("‚Ä¢ D√©velopper la t√©l√©m√©decine pour les zones isol√©es")
        print("‚Ä¢ Investir dans la formation du personnel m√©dical local")
        print("‚Ä¢ Adapter les infrastructures au vieillissement de la population")
        print("‚Ä¢ Renforcer la coordination entre les deux CHU pour une meilleure compl√©mentarit√©")

def main():
    """Fonction principale"""
    print("üè• ANALYSE COMPARATIVE DES CHU DE LA R√âUNION")
    print("=" * 60)
    
    # Initialiser l'analyseur
    analyzer = CHUReunionAnalyzer()
    
    # G√©n√©rer les donn√©es
    health_data = analyzer.generate_health_data()
    
    # Sauvegarder les donn√©es
    output_file = 'chu_reunion_health_data.csv'
    health_data.to_csv(output_file, index=False)
    print(f"üíæ Donn√©es sauvegard√©es: {output_file}")
    
    # Aper√ßu des donn√©es
    print("\nüëÄ Aper√ßu des donn√©es:")
    print(health_data[['Date', 'CHU_Nord_Patients', 'CHU_Sud_Patients', 'CHU_Nord_Budget', 'CHU_Sud_Budget']].head())
    
    # Cr√©er l'analyse
    print("\nüìà Cr√©ation de l'analyse hospitali√®re...")
    analyzer.create_health_analysis(health_data)
    
    print(f"\n‚úÖ Analyse des CHU de La R√©union termin√©e!")
    print(f"üìä P√©riode: {analyzer.start_year}-{analyzer.end_year}")
    print("üì¶ Donn√©es: Patients, urgences, budgets, personnel, √©pid√©miologie")

if __name__ == "__main__":
    main()